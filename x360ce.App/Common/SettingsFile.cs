using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Text;
using System.ComponentModel;
using System.Windows.Forms;
using System.Linq;
using x360ce.Engine;
using x360ce.App.Controls;
using System.Diagnostics;

namespace x360ce.App
{
	[Serializable]
	public class SettingsFile
	{


		[XmlAttribute]
		public int SettingsVersion { get; set; }
		public SortableBindingList<x360ce.Engine.Data.Game> Games { get { return _Games; } }
		public SortableBindingList<x360ce.Engine.Data.Program> Programs { get { return _Programs; } }
		public SortableBindingList<x360ce.Engine.Data.PadSetting> Pads { get { return _Pads; } }


		/// <summary>
		/// Default settings generated by choosing most popular configuration.
		/// </summary>
		SortableBindingList<x360ce.Engine.Data.Program> _Programs;
		/// <summary>
		/// Individual user settings.
		/// </summary>
		SortableBindingList<x360ce.Engine.Data.Game> _Games;
		/// <summary>
		/// Pad Configuration.
		/// </summary>
		SortableBindingList<x360ce.Engine.Data.PadSetting> _Pads;
		/// <summary>
		/// Settings file Version
		/// </summary>
		int _CurrentSettingsVersion = 4;

		public bool IsValidVersion()
		{
			return SettingsVersion == _CurrentSettingsVersion;
		}

		public SettingsFile()
		{
			_Games = new SortableBindingList<x360ce.Engine.Data.Game>();
			_Games.AddingNew += _Games_AddingNew;
			_Games.ListChanged += _Games_ListChanged;
			_Programs = new SortableBindingList<x360ce.Engine.Data.Program>();
			_Pads = new SortableBindingList<x360ce.Engine.Data.PadSetting>();
		}

		void _Games_ListChanged(object sender, ListChangedEventArgs e)
		{

		}

		void _Games_AddingNew(object sender, AddingNewEventArgs e)
		{

		}

		static object CurrentLock = new object();
		static SettingsFile _current;
		public static SettingsFile Current
		{
			get
			{
				lock (CurrentLock)
				{
					if (_current == null) _current = new SettingsFile();
				}
				return _current;
			}
		}

		[NonSerialized]
		FileInfo _InitialFile;
		object InitialFileLock = new object();
		[XmlIgnore]
		public FileInfo InitialFile
		{
			get
			{
				lock (InitialFileLock)
				{
					if (_InitialFile == null)
					{
						var path = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\X360CE\\x360ce.xml";
						_InitialFile = new FileInfo(path);
					}
					return _InitialFile;
				}
			}
		}

		object saveReadFileLock = new object();

		public void Save(bool updateGameDatabase = false)
		{
			if (updateGameDatabase)
			{
				GameDatabaseManager.Current.SetPrograms(Programs, Games);
			}
			lock (saveReadFileLock)
			{
				SettingsVersion = _CurrentSettingsVersion;
				Serializer.SerializeToXmlFile(this, InitialFile.FullName, System.Text.Encoding.UTF8);
			}
		}

		public void Load()
		{
			bool settingsLoaded = false;
			var settingsFi = new System.IO.FileInfo(InitialFile.FullName);
			// If configuration file exists then...
			if (settingsFi.Exists)
			{
				// Try to read file until success.
				while (true)
				{
					SettingsFile data;
					// Deserialize and load data.
					lock (saveReadFileLock)
					{
						try
						{
							data = Serializer.DeserializeFromXmlFile<SettingsFile>(InitialFile.FullName);
							if (data != null && data.IsValidVersion())
							{
								Programs.Clear();
								if (data.Programs != null)
								{
									// Make sure default settings have unique by file name.
									var distinctPrograms = data.Programs
										.GroupBy(p => p.FileName.ToLower())
										.Select(g => g.First())
										.ToList();
									for (int i = 0; i < distinctPrograms.Count; i++)
									{
										Programs.Add(distinctPrograms[i]);
									}
								}
								Games.Clear();
								if (data.Games != null)
								{
									// Make sure default settings have unique by file name.
									var distinctGames = data.Games
										.GroupBy(p => p.FileName.ToLower())
										.Select(g => g.First())
										.ToList();
									for (int i = 0; i < distinctGames.Count; i++)
									{
										Games.Add(distinctGames[i]);
									}
								}
								Pads.Clear();
								if (data.Pads != null) for (int i = 0; i < data.Pads.Count; i++) Pads.Add(data.Pads[i]);
								settingsLoaded = true;
							}
							break;
						}
						catch (Exception)
						{
							var form = new MessageBoxForm();
							var backupFile = InitialFile.FullName + ".bak";
							form.StartPosition = FormStartPosition.CenterParent;
							var result = form.ShowForm(
								"User settings file has become corrupted.\r\n" +
								"Program must reset your user settings in order to continue.\r\n\r\n" +
								"   Click [Yes] to reset your user settings and continue.\r\n" +
								"   Click [No] if you wish to attempt manual repair.\r\n\r\n" +
								"Settings File: " + InitialFile.FullName,
								"Corrupt user settings of " + Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Error);
							if (result == DialogResult.Yes)
							{
								if (System.IO.File.Exists(backupFile))
								{
									System.IO.File.Copy(backupFile, InitialFile.FullName, true);
									settingsFi.Refresh();
								}
								else
								{
									System.IO.File.Delete(InitialFile.FullName);
									break;
								}
							}
							else
							{
								// Avoid the inevitable crash by killing application first.
								Process.GetCurrentProcess().Kill();
								return;
							}
						}
					}
				}
			}
			// If settings failed to load then...
			if (!settingsLoaded)
			{
				// Get internal resources.
				var resource = EngineHelper.GetResource("x360ce_Games.xml.gz");
				// If internal preset was found.
				if (resource != null)
				{
					var sr = new StreamReader(resource);
					var compressedBytes = default(byte[]);
					using (var memstream = new MemoryStream())
					{
						sr.BaseStream.CopyTo(memstream);
						compressedBytes = memstream.ToArray();
					}
					var bytes = EngineHelper.Decompress(compressedBytes);
					var xml = System.Text.Encoding.UTF8.GetString(bytes);
					var programs = Serializer.DeserializeFromXmlString<List<x360ce.Engine.Data.Program>>(xml);
					Programs.Clear();
					for (int i = 0; i < programs.Count; i++) Programs.Add(programs[i]);
				}
			}
			// Check if current app doesn't exist in the list then...
			var currentFile = new System.IO.FileInfo(Application.ExecutablePath);
			var currentGame = Games.FirstOrDefault(x => x.FileName.ToLower() == currentFile.Name.ToLower());
			if (currentGame == null)
			{
				// Add x360ce.exe
				var item = x360ce.Engine.Data.Game.FromDisk(currentFile.Name);
				var program = Programs.FirstOrDefault(x => x.FileName.ToLower() == currentFile.Name.ToLower());
				item.LoadDefault(program);
				SettingsFile.Current.Games.Add(item);
			}
			else
			{
				currentGame.FullPath = currentFile.FullName;
			}
			if (!settingsLoaded)
			{
				Save(true);
			}
		}

	}
}
